# Example:  https://github.com/hsiddhu2/learn-aws-labs/blob/main/Intermediate/Create%20a%20CloudFormation%20Template%20For%20WebApp/template.yml
AWSTemplateFormatVersion: '2010-09-09'

Description: 
  The goal of this assignment is to create a CloudFormation stack that automates the deployment of a web application on AWS.
  The template creates a VPC with a public subnet and a private subnet. An Internet gateway is attached to the VPC, and 
  routing tables are configured for the public and private subnets. A security group is created for an Amazon EC2 instance with 
  rules allowing inbound HTTP and SSH traffic. An EC2 instance is launched in the public subnet. The instance runs a web server 
  and a python script to make a connection to the database. An Amazon RDS database instance is created in the private subnet.

Parameters:
  KeyName:
    Description: Name of an EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
  
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
  
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  
  myPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet

  myPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet

  myPrivate2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.1.3.0/24
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private2Subnet

  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
  
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable
  
  myPrivate2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private2RouteTable
  
  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  
  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnet
      RouteTableId: !Ref myPublicRouteTable

  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet
      RouteTableId: !Ref myPrivateRouteTable
  
  myPrivate2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivate2Subnet
      RouteTableId: !Ref myPrivate2RouteTable
  
  myEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2SecurityGroup

  myRdsDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn: 
      - myPrivateSubnet
      - myPrivate2Subnet
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
        - !Ref myPrivateSubnet
        - !Ref myPrivate2Subnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSubnetGroup      

  myRdsDbSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    DependsOn: 
      - myEC2SecurityGroup
      - myPrivateSubnet
      - myPrivate2Subnet
      - myPublicSubnet
      - myInternetGateway
      - myVPCGatewayAttachment
      - myPublicRouteTable
      - myPrivateRouteTable
      - myPublicSubnetRouteTableAssociation
      - myPrivateSubnetRouteTableAssociation
      - myPrivate2SubnetRouteTableAssociation
      - myRdsDbSubnetGroup
      - myPublicRoute
      - myVPC 
    Properties:
      GroupDescription: Allow database access to ec2 instance only
      DBSecurityGroupIngress: 
        EC2SecurityGroupId: !Ref myEC2SecurityGroup
      EC2VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSecurityGroup
      
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - myRdsDbSecurityGroup
      - myRdsDbSubnetGroup
      - myPrivateSubnet
      - myPrivate2Subnet
    Properties:
      DBName: myDB
      DBInstanceIdentifier: !Sub ${AWS::StackName}-DBInstance
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      EngineVersion: '5.7'
      MasterUsername: admin
      MasterUserPassword: admin123
      DBSubnetGroupName: !Ref myRdsDbSubnetGroup
      DBSecurityGroups:
        - !Ref myRdsDbSecurityGroup
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBInstance
        
  MyEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - myEC2SecurityGroup
      - myPublicSubnet
      - myPrivateSubnet
      - myPrivate2Subnet
      - myInternetGateway
      - myVPCGatewayAttachment
      - myPublicRouteTable
      - myPrivateRouteTable
      - myPublicSubnetRouteTableAssociation
      - myPrivateSubnetRouteTableAssociation
      - myPrivate2SubnetRouteTableAssociation
    Properties:
      InstanceType: t2.small
      ImageId: ami-047bb4163c506cd98      
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref myEC2SecurityGroup
          SubnetId: !Ref myPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2Instance      
          
Outputs:
  EC2:
    Value: !GetAtt MyEC2Instance.PublicIp
    Description: EC2 instance public IP address  
  MySQL:
    Description: The endpoint of the newly created RDS instance
    Value: !GetAtt MyDBInstance.Endpoint.Address  
  VPC:
    Description: The ID of the newly created VPC
    Value: !Ref myVPC
  PublicSubnet:
    Description: The ID of the newly created public subnet
    Value: !Ref myPublicSubnet
    